---
import Layout from '../layout/Layout.astro';
---

<slot name="metas">
	<title>Releasenote Genearator</title>
	<meta name="description" content="Releasenote Generator project, I made this to make writing releasenotes a bit easier as a Product Owner." />
	<meta name="keywords" content="release, notes, releasenotes, ai, artificial intelligence, artificial, intelligence, python, jira, strapi, openai, api" />
</slot>

<Layout>
	<div class="container mb-20">
		<h1>How I Built a Release Note Generator Using Jira, OpenAI API, and Strapi</h1>
		<p>In the ever-evolving landscape of software development, generating comprehensive and accurate release notes can be a time-consuming task. To streamline this process, I developed a release note generator that automates the creation of release notes by integrating with Jira, leveraging the power of OpenAI's API, and storing the results in a Strapi database. Here’s how I did it:</p>
		<pre class="h-100 py-2 px-4 overflow-auto"><code class="language-py">
from datetime import datetime
from dotenv import load_dotenv
import os

from classes.strapi_client import StrapiClient
from classes.jira_story_mapper import JiraStoryMapper
from classes.jira_story_controller import JiraStoryController
from classes.releasenote import Releasenote

load_dotenv()

if __name__ == '__main__':
	failed = []

	strapi = StrapiClient()

	items = JiraStoryMapper.map(JiraStoryController.getStoriesByQuery(os.environ.get('QUERY')))
	
	for item in items:
		releasenote = Releasenote(item.content)

		releasenotes = releasenote.generate()
		
		if releasenote and releasenotes:
			if strapi.post('/api/releasenotes', &#123;'data': &#123;
				'Title': releasenotes['title'],
				'Content': releasenotes['notes'],
				'Release': os.environ.get('RELEASE'),
				'ExternalID': item.key,
				'Created': datetime.now().isoformat()
			&#125;&#125;):
				print('Generated note for &#123;&#125;'.format(item.key))
		else:
			print('Failed to generate note for &#123;&#125;'.format(item.key))
			failed.append(item.key)

	if failed:
		print('Failed items:')
		print(failed)
			</code>
		</pre>
		<h3>1. Connecting to Jira</h3>
		<p>The first step in the process was establishing a connection to the Jira instance. Jira, being a primary project management tool, holds all the stories and issues that need to be included in the release notes. Here's how I set it up:
		<h3>Jira API Integration</h3> 
		<p>I used Jira's REST API to retrieve stories based on a specified JQL (Jira Query Language) query. The query parameters allowed me to filter stories by various criteria, such as release version, project, and status.</p>
		<h3>2. Generating Release Notes with OpenAI API</h3>
		<p>Once the stories were retrieved from Jira, the next step was to generate release notes. This is where the OpenAI API came into play. I used the contents of each Jira story to prompt the OpenAI API to generate descriptive and coherent release notes.</p>
    	<h3>OpenAI API Integration</h3> 
		<p>For each story, I constructed a prompt that included relevant details such as the story title, description, and acceptance criteria. This prompt was sent to the OpenAI API to generate a summary.</p>
		<h3>3. Storing Release Notes in Strapi</h3>
		<p>Finally, I needed a place to store the generated release notes so they could be easily accessed and managed. I chose Strapi, a headless CMS, for this purpose due to its flexibility and ease of use.</p>
    	<h3>Strapi API Integration</h3>
		<p>I used Strapi's REST API to create new entries for each release note. This allowed the release notes to be stored in a structured manner, with the ability to add metadata and additional information as needed.</p>
		<h3>Conclusion</h3>
		<p>By integrating Jira, OpenAI API, and Strapi, I successfully automated the process of generating and managing release notes. This solution not only saves time but also ensures that release notes are consistent and comprehensive. Here’s a quick recap of the steps:</p>
		<ul class="language-python list-disc list-inside mb-4">
			<li>Retrieve stories from Jira using a specified JQL query.</li>
			<li>Generate release notes for each story using the OpenAI API.</li>
			<li>Store the generated release notes in Strapi for easy access and management.</li>
		</ul>
		<p class="mb-10">This project showcases the power of combining multiple APIs and tools to create a seamless and efficient workflow, significantly improving productivity and documentation quality in software development projects.</p>
		<a href="https://github.com/rvrbk/notegenerator/" target="_blank" class="inline-flex items-center bg-gray-800 text-white text-sm font-semibold mb-1 px-4 py-2 rounded hover:bg-gray-700">
			<svg xmlns="http://www.w3.org/2000/svg" fill="#fff" width="24" height="24" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
			<span class="pl-2">View On GitHub</span>
		</a>
	</div>
	<script>
		import Prism from 'prismjs';
		import 'prismjs/themes/prism-twilight.css';
		import 'prismjs/components/prism-python';

		document.querySelectorAll('code').forEach((e) => {
			e.innerHTML = e.innerHTML.trim();
		});

		Prism.highlightAll();
	</script>
</Layout>